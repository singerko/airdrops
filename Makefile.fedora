# Makefile.fedora - Helper commands pre Fedora s Podman
.PHONY: help setup up down restart logs shell db-shell clean backup restore

# Default goal
.DEFAULT_GOAL := help

# Variables
COMPOSE_CMD = podman-compose
COMPOSE_FILE = -f docker-compose.yml
APP_CONTAINER = airdrop_app
DB_CONTAINER = airdrop_db

help: ## Zobraz√≠ dostupn√© pr√≠kazy
	@echo "üêß Airdrop Portal - Fedora Helper Commands"
	@echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

setup: ## Kompletn√Ω setup projektu (prv√© spustenie)
	@echo "üöÄ Setting up Airdrop Portal on Fedora..."
	@./setup-fedora.sh || (echo "‚ùå Setup failed!" && exit 1)
	@echo "‚úÖ Setup completed!"

up: ## Spust√≠ v≈°etky containers
	@echo "üîÑ Starting containers..."
	@$(COMPOSE_CMD) $(COMPOSE_FILE) up -d
	@echo "‚úÖ Containers started!"

down: ## Zastav√≠ v≈°etky containers
	@echo "üõë Stopping containers..."
	@$(COMPOSE_CMD) $(COMPOSE_FILE) down
	@echo "‚úÖ Containers stopped!"

restart: ## Re≈°tartuje v≈°etky containers
	@echo "üîÑ Restarting containers..."
	@$(COMPOSE_CMD) $(COMPOSE_FILE) restart
	@echo "‚úÖ Containers restarted!"

build: ## Rebuild containers
	@echo "üî® Building containers..."
	@$(COMPOSE_CMD) $(COMPOSE_FILE) up -d --build
	@echo "‚úÖ Containers built!"

logs: ## Zobraz√≠ logy v≈°etk√Ωch services
	@$(COMPOSE_CMD) $(COMPOSE_FILE) logs -f

logs-app: ## Zobraz√≠ logy iba app container
	@$(COMPOSE_CMD) $(COMPOSE_FILE) logs -f $(APP_CONTAINER)

logs-db: ## Zobraz√≠ logy iba database container
	@$(COMPOSE_CMD) $(COMPOSE_FILE) logs -f $(DB_CONTAINER)

status: ## Zobraz√≠ status containers
	@echo "üìä Container Status:"
	@$(COMPOSE_CMD) $(COMPOSE_FILE) ps

shell: ## Pripoj√≠ sa do app container (bash)
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) bash

shell-root: ## Pripoj√≠ sa do app container ako root
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec -u root $(APP_CONTAINER) bash

db-shell: ## Pripoj√≠ sa do MySQL datab√°zy
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(DB_CONTAINER) mysql -u airdrop_user -p airdrop_portal

artisan: ## Spust√≠ artisan pr√≠kaz (pou≈æitie: make artisan CMD="migrate")
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) php artisan $(CMD)

migrate: ## Spust√≠ database migr√°cie
	@echo "üóÉÔ∏è  Running migrations..."
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) php artisan migrate
	@echo "‚úÖ Migrations completed!"

migrate-fresh: ## Fresh migr√°cie + seed (POZOR: vyma≈æe d√°ta!)
	@echo "‚ö†Ô∏è  Fresh migration (will delete all data!)..."
	@read -p "Are you sure? [y/N] " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) php artisan migrate:fresh --seed; \
		echo "‚úÖ Fresh migration completed!"; \
	else \
		echo "‚ùå Cancelled."; \
	fi

seed: ## Spust√≠ database seeders
	@echo "üå± Seeding database..."
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) php artisan db:seed
	@echo "‚úÖ Seeding completed!"

cache-clear: ## Vyƒçist√≠ v≈°etky cache
	@echo "üßπ Clearing cache..."
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) php artisan cache:clear
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) php artisan config:clear
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) php artisan route:clear
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) php artisan view:clear
	@echo "‚úÖ Cache cleared!"

cache-build: ## Vybuilduje v≈°etky cache
	@echo "‚ö° Building cache..."
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) php artisan config:cache
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) php artisan route:cache
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) php artisan view:cache
	@echo "‚úÖ Cache built!"

backup: ## Vytvor√≠ backup datab√°zy
	@echo "üíæ Creating database backup..."
	@mkdir -p backups
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(DB_CONTAINER) mysqldump -u airdrop_user -pairdrop_password airdrop_portal > backups/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Backup created in backups/ directory"

restore: ## Obnov√≠ datab√°zu z backup s√∫boru (pou≈æitie: make restore FILE=backup.sql)
	@if [ -z "$(FILE)" ]; then \
		echo "‚ùå Please specify backup file: make restore FILE=backup.sql"; \
		exit 1; \
	fi
	@echo "üîÑ Restoring database from $(FILE)..."
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec -T $(DB_CONTAINER) mysql -u airdrop_user -pairdrop_password airdrop_portal < $(FILE)
	@echo "‚úÖ Database restored!"

clean: ## Vyƒçist√≠ containers, volumes a images (POZOR!)
	@echo "‚ö†Ô∏è  This will remove all containers, volumes and images!"
	@read -p "Are you sure? [y/N] " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		$(COMPOSE_CMD) $(COMPOSE_FILE) down -v; \
		podman system prune -a -f; \
		echo "‚úÖ Cleanup completed!"; \
	else \
		echo "‚ùå Cancelled."; \
	fi

update: ## Aktualizuje projekt z Git a re≈°tartuje
	@echo "üîÑ Updating project..."
	@git pull origin develop
	@$(COMPOSE_CMD) $(COMPOSE_FILE) down
	@$(COMPOSE_CMD) $(COMPOSE_FILE) up -d --build
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) php artisan migrate
	@echo "‚úÖ Project updated!"

test: ## Spust√≠ testy
	@echo "üß™ Running tests..."
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) php artisan test
	@echo "‚úÖ Tests completed!"

install: ## Nain≈°taluje PHP dependencies
	@echo "üì¶ Installing dependencies..."
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) composer install
	@echo "‚úÖ Dependencies installed!"

npm-install: ## Nain≈°taluje NPM dependencies
	@echo "üì¶ Installing NPM dependencies..."
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) npm install
	@echo "‚úÖ NPM dependencies installed!"

npm-build: ## Builduje frontend assets
	@echo "üî® Building frontend assets..."
	@$(COMPOSE_CMD) $(COMPOSE_FILE) exec $(APP_CONTAINER) npm run build
	@echo "‚úÖ Frontend assets built!"

health: ## Skontroluje zdravie v≈°etk√Ωch services
	@echo "üè• Health Check:"
	@echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
	@$(COMPOSE_CMD) $(COMPOSE_FILE) ps
	@echo ""
	@echo "üåê Testing endpoints:"
	@curl -s -o /dev/null -w "Frontend:    %{http_code}\n" http://localhost:8080 || echo "Frontend:    ‚ùå Down"
	@curl -s -o /dev/null -w "Admin Panel: %{http_code}\n" http://localhost:8080/admin || echo "Admin Panel: ‚ùå Down"
	@curl -s -o /dev/null -w "Mailhog:     %{http_code}\n" http://localhost:8025 || echo "Mailhog:     ‚ùå Down"

# Quick aliases
start: up ## Alias pre 'up'
stop: down ## Alias pre 'down'
rebuild: build ## Alias pre 'build'
